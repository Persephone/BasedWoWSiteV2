// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Context;

namespace server.Migrations
{
    [DbContext(typeof(WebsiteContext))]
    partial class WebsiteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("server.Data.Website.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId");

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("AccountId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .HasMaxLength(16);

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Lastname")
                        .HasMaxLength(16);

                    b.Property<string>("Location");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(255);

                    b.Property<byte>("Online");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int>("TotalVotes");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(255);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<Guid>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasMaxLength(255);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken");
                });

            modelBuilder.Entity("server.Data.Website.Changelog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<sbyte>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category")
                        .HasColumnType("tinyint(3)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte>("Realm")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("realm")
                        .HasColumnType("tinyint(3)")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title")
                        .HasColumnType("text")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.ToTable("changelog");
                });

            modelBuilder.Entity("server.Data.Website.ChangelogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color")
                        .HasColumnType("text")
                        .HasDefaultValueSql("ffffff");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title")
                        .HasColumnType("text")
                        .HasDefaultValueSql("title");

                    b.HasKey("Id");

                    b.ToTable("changelog_categories");
                });

            modelBuilder.Entity("server.Data.Website.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<Guid>("Author")
                        .HasColumnName("author");

                    b.Property<string>("Content")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("content")
                        .HasColumnType("text")
                        .HasDefaultValueSql("title");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("image")
                        .HasColumnType("text")
                        .HasDefaultValueSql("https://avatarfiles.alphacoders.com/151/151182.jpg");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title")
                        .HasColumnType("text")
                        .HasDefaultValueSql("title");

                    b.HasKey("Id");

                    b.ToTable("news");
                });

            modelBuilder.Entity("server.Data.Website.NewsComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<Guid>("Author")
                        .HasColumnName("userId");

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("comment")
                        .HasColumnType("text")
                        .HasDefaultValueSql("no comment");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnName("lastEdited")
                        .HasColumnType("datetime");

                    b.Property<int>("NewsId")
                        .HasColumnName("newsId")
                        .HasColumnType("int(10) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("news_comments");
                });

            modelBuilder.Entity("server.Data.Website.ShoutBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnName("message")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<Guid>("User")
                        .HasColumnName("user");

                    b.HasKey("Id");

                    b.ToTable("shoutbox");
                });

            modelBuilder.Entity("server.Data.Website.UnstuckLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<short>("Map")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("map")
                        .HasColumnType("float unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("text unsigned")
                        .HasDefaultValueSql("Unknown");

                    b.Property<float>("PositionX")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("position_x")
                        .HasColumnType("float unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<float>("PositionY")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("position_y")
                        .HasColumnType("float unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<float>("PositionZ")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("position_z")
                        .HasColumnType("float unsigned")
                        .HasDefaultValueSql("0");

                    b.Property<sbyte>("RealmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("realmId")
                        .HasColumnType("tinyint(3)")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.ToTable("unstuck_locations");
                });

            modelBuilder.Entity("server.Data.Website.Vote", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<byte>("Site");

                    b.Property<long>("UnsetTimer");

                    b.HasKey("UserId", "Site", "UnsetTimer");

                    b.HasAlternateKey("Site", "UnsetTimer", "UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("server.Data.Website.VoteSite", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Image");

                    b.Property<string>("Link");

                    b.Property<string>("Name");

                    b.Property<int>("UnsetTime");

                    b.Property<byte>("Value");

                    b.HasKey("Id");

                    b.ToTable("VoteSites");
                });

            modelBuilder.Entity("server.Data.Website.ApplicationRoleClaim", b =>
                {
                    b.HasOne("server.Data.Website.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserClaim", b =>
                {
                    b.HasOne("server.Data.Website.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserLogin", b =>
                {
                    b.HasOne("server.Data.Website.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserRole", b =>
                {
                    b.HasOne("server.Data.Website.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("server.Data.Website.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Data.Website.ApplicationUserToken", b =>
                {
                    b.HasOne("server.Data.Website.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("server.Data.Website.NewsComment", b =>
                {
                    b.HasOne("server.Data.Website.News")
                        .WithMany("Comments")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
